from selenium import webdriver
from selenium.webdriver.common.keys import Keys
import unittest

class NewVisitorTest(unittest.TestCase):

    def setUp(self):
	self.browser = webdriver.Firefox()
	self.browser.implicitly_wait(3)

    def tearDown(self):
	self.browser.quit()

    def test_can_start_a_list_and_retrieve_it_later(self):
	# Tesla goes to check out the home page
	self.browser.get('http://localhost:7070')
	
	# He notices the title mentions To-Do
	self.assertIn('To-Do', self.browser.title)
	header_text = self.browser.find_element_by_tag_name('h1').text
	self.assertIn('To-Do', header_text)
	
	# He is invited to enter a ToDo item straight away.
	input_box = self.browser.find_element_by_id('id_new_item')
	self.assertEqual(
		input_box.get_attribute('placeholder'),
		'Enter a to-do item'
	)

	# He types 'Call Faraday' into text box
	first_list_item = 'Call Faraday'
	input_box.send_keys(first_list_item)

	# When he hits enter, the page updates, and now
	# lists '1: Call Faraday' as an item in a to-do list
	input_box.send_keys(Keys.ENTER)

	table = self.browser.find_element_by_id('id_list_table')
	rows = table.find_elements_by_tag_name('tr')
	self.assertTrue(
		any(row.text == '1: ' + first_list_item for row in rows),
		"The to-do list is empty even after entering an element.It contains: %s" %(table.text,)
	)
	# There is still a test-box inviting him to enter
	# another item. He enters "Use that information" as an item to ToDo list
	input_box = self.browser.find_element_by_id('id_new_item')
	second_list_item = 'Use that information'
	input_box.send_keys(second_list_item);
	input_box.send_keys(Keys.ENTER)
	
	# Page updates again and shows both the item in his ToDo list
	table = self.browser.find_element_by_id('id_list_table')
	rows = table.find_elements_by_tag_name('tr')
	self.assertIn('1: ' + first_list_item, [row.text for row in rows])
	self.assertIn('2:: ' + second_list_item, [row.text for row in rows])
	
	# He wonders whether site will still remember his list. He notices a
	# unique URL has been generated by the site. He visits the Url to find
	# his todo list is still there.
	self.fail('Finish the test.')
	
	# Satisfied he goes to sleep for the day.

if __name__ == '__main__':
    unittest.main()
